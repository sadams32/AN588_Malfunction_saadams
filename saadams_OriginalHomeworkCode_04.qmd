---
title: "saadams_OriginalHomeworkCode_04"
format: html
editor: visual
theme: readthedown
toc: true
toc-depth: 5
code-block-bg: true
code-block-border-left: "blue"
highlight-style: "gruvbox"
---

![](img/robot.png)

## Load Packages



## Load Data



## Task 1

*Write a simple R function, Z.prop.test(), that can perform one- or two-sample Z-tests for proportion data, using the following guidelines:*

:   Your function should take the following arguments: p1 and n1 (no default) representing the estimated proportion and sample size (i.e., based on your sample data); p2 and n2 (both defaulting to NULL) that contain a second sample‚Äôs proportion and sample size data in the event of a two-sample test; p0 (no default) as the expected value for the population proportion; and alternative (default ‚Äútwo.sided‚Äù) and conf.level (default 0.95), to be used in the same way as in the function t.test().

:   When conducting a two-sample test, it should be p1 that is tested as being smaller or larger than p2 when alternative=‚Äúless‚Äù or alternative=‚Äúgreater‚Äù, the same as in the use of x and y in the function t.test(). The function should perform a one-sample Z-test using p1, n1, and p0 if either p2 or n2 (or both) is NULL.

:   The function should contain a check for the rules of thumb we have talked about (ùëõxùëù\> 5 and ùëõx (1‚àíùëù) \> 5) to ensure the validity of assuming the normal distribution in both the one- and two-sample settings. If this is violated, the function should still complete but it should also print an appropriate warning message.

:   The function should return a list containing the members Z (the test statistic), P (the appropriate p value), and CI (the two-sided CI with respect to ‚Äúconf.level‚Äù around p1 in the case of a one-sample test and around p2-p1 in the case of a two-sample test). For all test alternatives (‚Äútwo.sided‚Äù, ‚Äúgreater‚Äù, ‚Äúless‚Äù), calculate symmetric CIs based on quantiles of the normal distribution rather than worrying about calculating single-limit confidence bounds.

```{r}
Z.prop.test <- function(p1, n1, p2 = NULL, n2 = NULL, p0, alternative = "two.sided", conf.level = 0.95) {
  # require initial check for if distribution is normal w/ check.norm function
  check.norm <- function(p,n){
    if (n * p <= 5 && n * (1 - p) <= 5){
      warning("Your distribution may not be normal: np and n(1 - p) should both be > 5.")
    }
  }
  check.norm(p1, n1)
  if(!is.null(p2) && !is.null(n2))
    check.norm(p2, n2)
  
  alpha <- 1 - conf.level # calculate alpha value
  crit <- qnorm(1 - alpha/2) # calculate critical values for CI
  
  # one-sample Z-test function
  if(is.null(p2) || is.null(n2)) {
    SE <- sqrt(p0 * (1 - p0) / n1) # calculate SE for Z test statistic
    Z <- (p1 - p0) / SE # calculate Z test statistic
    CI <- p1 + (c(-1, 1) * crit * SE) # p1 +/- the negative and positive values of crit * SE = confidence interval
    
    if (alternative == "two.sided") {
      P <- 2 * pnorm(-abs(Z))
    } else if (alternative == "greater") {
      P <- 1 - pnorm(Z)
    } else {
      P <- pnorm(Z)
    }
  } 
  
  # two-sample Z-test function
  else {
    pstar <- (p1 + p2) / (n1 + n2) # pooled proportion
    SE <- sqrt((pstar * (1 - pstar)) * ((1/n1) + (1/n2)))
    Z <- (p1 - p2) / SE # critical values
    CI <- (p1 - p2) + (c(-1, 1) * crit * SE) # calculate confidence interval
    
    if (alternative == "two.sided"){
      P <- 2 * pnorm(-abs(Z))
    } else if (alternative == "greater") {
      P <- 1 - pnorm(Z)
    } else {
      P <- pnorm(Z)
    }
  }
  return(list(Z = Z, P = P, CI = CI)) # return list of relevant values: Z (the test statistic), P (the appropriate p value), and CI (confidence interval)
}

```

## Task 2

*The dataset from Kamilar and Cooper has in it a large number of variables related to life history and body size. For this exercise, the end aim is to fit a simple linear regression model to predict longevity (MaxLongevity_m) measured in months from species‚Äô brain size (Brain_Size_Species_Mean) measured in grams. Do the following for both longevity~brain size and log(longevity)~log(brain size):*

: Fit the regression model and, using {ggplot2}, produce a scatterplot with the fitted line superimposed upon the data. Append the the fitted model equation to your plot (HINT: use the function geom_text()).

: Identify and interpret the point estimate of the slope (ùõΩ1), as well as the outcome of the test associated with the hypotheses H0: ùõΩ1 = 0; HA: ùõΩ1 ‚â† 0. Also, find a 90 percent CI for the slope (ùõΩ1) parameter.

: Using your model, add lines for the 90 percent confidence and prediction interval bands on the plot and add a legend to differentiate between the lines.

: Produce a point estimate and associated 90 percent PI for the longevity of a species whose brain weight is 800 gm. Do you trust the model to predict observations accurately for this value of the explanatory variable? Why or why not?

: Looking at your two models, which do you think is better? Why?

```{r}

```

